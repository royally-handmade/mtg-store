// Netlify serverless function wrapper for Express API
// This file wraps your Express backend to work as a Netlify Function

import express from 'express'
import serverless from 'serverless-http'
import cors from 'cors'
import helmet from 'helmet'
import morgan from 'morgan'
import dotenv from 'dotenv'
import { createClient } from '@supabase/supabase-js'

// Import routes
import authRoutes from '../../../backend/routes/auth.js'
import cardsRoutes from '../../../backend/routes/cards.js'
import listingsRoutes from '../../../backend/routes/listings.js'
import ordersRoutes from '../../../backend/routes/orders.js'
import sellerRoutes from '../../../backend/routes/seller.js'
import adminRoutes from '../../../backend/routes/admin.js'
import deckBuilderRoutes from '../../../backend/routes/deckBuilder.js'
import cartRoutes from '../../../backend/routes/cart.js'
import shippingRoutes from '../../../backend/routes/shipping.js'
import paymentRoutes from '../../../backend/routes/payment.js'
import wishlistRoutes from '../../../backend/routes/wishlist.js'
import scryfallRoutes from '../../../backend/routes/scryfall.js'
import usersRoutes from '../../../backend/routes/users.js'
import searchRoutes from '../../../backend/routes/search.js'

// Import middleware
import { authenticateUser } from '../../../backend/middleware/auth.js'
import { rateLimitMiddleware } from '../../../backend/middleware/rateLimiter.js'

dotenv.config()

// Create Express app
const app = express()

// Supabase client
export const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SECRET_KEY
)

export const supabaseAdmin = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SECRET_KEY
)

// Middleware
app.use(helmet({
  contentSecurityPolicy: false, // Disable for Netlify
  crossOriginEmbedderPolicy: false
}))
app.use(cors())
app.use(morgan('combined'))
app.use(express.json({ limit: '10mb' }))
app.use(express.urlencoded({ extended: true }))
app.use(rateLimitMiddleware)

// Routes - note the /api prefix is handled by Netlify redirects
app.use('/api/auth', authRoutes)
app.use('/api/cards', cardsRoutes)
app.use('/api/listings', listingsRoutes)
app.use('/api/orders', ordersRoutes)
app.use('/api/seller', authenticateUser, sellerRoutes)
app.use('/api/admin', authenticateUser, adminRoutes)
app.use('/api/deck-builder', authenticateUser, deckBuilderRoutes)
app.use('/api/cart', cartRoutes)
app.use('/api/shipping', shippingRoutes)
app.use('/api/payment', paymentRoutes)
app.use('/api/wishlist', wishlistRoutes)
app.use('/api/users', usersRoutes)
app.use('/api/scryfall', authenticateUser, scryfallRoutes)
app.use('/api/search', searchRoutes)

// Health check
app.get('/api/health', async (req, res) => {
  try {
    const healthCheck = {
      status: 'healthy',
      timestamp: new Date().toISOString(),
      uptime: process.uptime(),
      environment: process.env.NODE_ENV || 'development',
      service: 'MTG Marketplace API',
      version: '1.0.0'
    }

    // Test database connection
    const { data, error } = await supabase
      .from('profiles')
      .select('count')
      .limit(1)

    if (error) {
      healthCheck.database = 'unhealthy'
      healthCheck.databaseError = error.message
      healthCheck.status = 'degraded'
    } else {
      healthCheck.database = 'healthy'
    }

    const httpStatus = healthCheck.status === 'healthy' ? 200 : 503
    res.status(httpStatus).json(healthCheck)
  } catch (error) {
    res.status(503).json({
      status: 'unhealthy',
      error: error.message,
      timestamp: new Date().toISOString()
    })
  }
})

// Error handling
app.use((err, req, res, next) => {
  console.error(err.stack)
  res.status(500).json({ error: 'Something went wrong!' })
})

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({ error: 'Route not found' })
})

// Export the serverless handler
export const handler = serverless(app)